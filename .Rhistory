Zuhause$YM   <- paste0(Zuhause$Year, "-", Zuhause$Month)
# date as character (otherwise it won't bind)
zuhause$Date <- as.character(zuhause$Date)
# combine
zh <- rbind(mutate(zuhause, variant = "zuhause"),
mutate(Zuhause, variant = "Zuhause"),
mutate(zu_Hause, variant = "zu Hause"))
zh[which(zh$Hit=="zu"),]$Hit <- "zu Hause"
zh[which(zh$Hit=="zu Hause"),]$ContextAfter <- gsub("^Hause ", "", zh[which(zh$Hit=="zu Hause"),]$ContextAfter)
# frequency of variant by Year/Month
zh1 <- zh %>% group_by(YM, variant) %>% summarise(
n = n()
)
# total frequency by Year/Month
zh2 <- zh %>% group_by(YM) %>% summarise(
n_all = n()
)
# combine both
zh_tbl <- left_join(zh1, zh2)
# add relative frequency
zh_tbl$rel <- zh_tbl$n / zh_tbl$n_all
# omit all before 2020
zh_tbl <- zh_tbl[grepl("2020|2021", zh_tbl$YM),]
# plot
zh_tbl %>% ggplot(aes (x = YM, y = rel, group = variant, col = variant)) +
geom_line(lwd = 1.2) + scale_y_continuous(labels = scales::percent) + theme_bw() + theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) + xlab("Month") + ylab("Relative Frequency") +
guides(col = guide_legend(title = "Variant"))
zh$first_right <- first_right(zh, "ContextAfter", n = 1)
zh$last_left   <- last_left(zh, "ContextBefore", n = 1)
# get list of types in last_left and first_right columns
zh_last_left_first_right_types <- unique(c(zh$last_left, zh$first_right))
# run treetagger over those types
zh_last_left_first_right_types_tagged <- treetag(zh_last_left_first_right_types,
treetagger = "manual",
TT.options = list(path = "/Users/stefanhartmann/Downloads/TreeTagger/",
preset = "de"), lang = "de", format = "obj")
# transform to dataframe
zh_last_left_first_right_types_tagged <- tibble(
token = as.character(zh_last_left_first_right_types_tagged@tokens$token),
pos   = as.character(zh_last_left_first_right_types_tagged@tokens$wclass)
)
# remove duplicates
if(any(duplicated(zh_last_left_first_right_types_tagged$token))) {
zh_last_left_first_right_types_tagged <- zh_last_left_first_right_types_tagged[-(which(duplicated(zh_last_left_first_right_types_tagged$token))),]
}
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("LastLeftPOS" = "pos"))
# add to existing dataframe: left
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("last_left" = "token"), all.x = T)
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("FirstRightPOS" = "LastLeftPOS"))
# add to existing dataframe: right
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("first_right" = "token"), all.x = T)
# zu Hause bleiben
zh$cxn <- character(nrow(zh))
first_right(zh, "ContextBefore", n = 4))
first_right(zh, "ContextBefore", n = 4)
first_right(zh, "ContextBefore", n = 4) %>% length
grep("[Bb]leib", first_right(zh, "ContextBefore", n = 4))
grep("[Bb]leib.*", first_right(zh, "ContextBefore", n = 4))
grep("[Bb]leib.*", first_right(zh, "ContextAfter", n = 5))
grep("[Bb]leib.*", first_right(zh, "ContextBefore", n = 5))
zh[grep("[Bb]leib.*", first_right(zh, "ContextBefore", n = 5)),] %>% View
# new column: "cxn" for "construction"
zh$cxn <- character(nrow(zh))
# von zu Hause
zh[which(zh$last_left=="von"),]$cxn <- "von zh"
# zu Hause zu V-en
zh[which(zh$first_right=="zu" & zh$cxn == ""),]$cxn <- "zh zu v"
# zu Hause sein
zh[which(zh$first_right %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart") | zh$last_left %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart")),]$cxn <- "zh sein"
# zh einsperren / eingesperrt
zh[grep("ein(ge)?sperr.*", zh$last_left),]$cxn <- "zh EINSPERR"
zh[grep("ein(ge)?sperr.*", zh$first_right),]$cxn <- "zh EINSPERR"
# zh verbringen
zh[grep("verbring|verbrach", zh$first_right),]$cxn <- "zh verbringen"
zh[grep("verbring|verbrach", zh$last_left),]$cxn <- "zh verbringen"
# das (eigene) Zuhause
zh[which(zh$last_left %in% c("das", "dem", "ein", "einem")),]$cxn <- "ART zh"
zh[which(last_left(zh, "ContextBefore", n = 2) %in% c("das eigene", "dem eigenen", "ein eigenes", "einem eigenen")),]$cxn <- "ART eigene zh"
# PRONOUN (demonstrative/possessive & quantifiers) + Zuhause
zh[which(zh$last_left %in% c("Ihr", "ihr", "sein", "dein", "mein", "unser", "euer", "seinem", "unserem", "keinem", "dieses", "dessen", "Ihrem", "ihrem", "kein", "keinem", "manches", "mehrere", "meinem")),]$cxn <- "PRONOUN zh"
# zh in Quarantäne
zh[which(first_right(zh, "ContextAfter", n = 2) == "in Quarantäne"),]$cxn <- "zh in Quarantäne"
# für zh
zh[which(zh$last_left == "für"),]$cxn <- "für zh"
# zh arbeiten
zh[grep("arbeit.*", zh$last_left),]$cxn <- "zh arbeiten"
zh[grep("arbeit.*", zh$first_right),]$cxn <- "zh arbeiten"
# zh bleiben
zh[grep("[Bb]leib.*", first_right(zh, "ContextBefore", n = 5)),]$cxn = "zh bleiben"
zh[grep("[Bb]leib.*", first_right(zh, "ContextAfter", n = 5)),]$cxn = "zh bleiben"
zh[grep("blei.*", zh$ContextBefore),] %>% View
# install "concordances" package, if not yet installed
if(!is.element("concordances", installed.packages())) {
devtools::install_github("hartmast/concordances")
}
library(tidyverse)
library("koRpus.lang.de")
library(scales)
library(concordances)
library(pbapply)
library(openxlsx)
# read data
zuhause <- read_csv("zuhause_lowercase.csv", col_types = c("d", rep("c", 7)))
Zuhause <- read_csv("Zuhause.csv")
zu_Hause <- read_csv("zu_Hause.csv", col_types = c("d", rep("c", 7)))
# add Month and Year columns
zuhause$Month <- gsub("^[0-9]{4}-|-[0-9]{2}$", "", zuhause$Date)
zuhause$Year <- gsub("-.*", "", zuhause$Date)
zuhause$YM   <- paste0(zuhause$Year, "-", zuhause$Month)
zu_Hause$Year <- gsub(".*\\.", "", zu_Hause$Date)
zu_Hause$Month <- gsub("^[0-9]{2}\\.|\\.[0-9]{4}$", "", zu_Hause$Date)
zu_Hause$YM  <- paste0(zu_Hause$Year, "-", zu_Hause$Month)
Zuhause$Month <- gsub("^[0-9]{4}-|-[0-9]{2}$", "", Zuhause$Date)
Zuhause$Year <- gsub("-.*", "", Zuhause$Date)
Zuhause$YM   <- paste0(Zuhause$Year, "-", Zuhause$Month)
# date as character (otherwise it won't bind)
zuhause$Date <- as.character(zuhause$Date)
# combine
zh <- rbind(mutate(zuhause, variant = "zuhause"),
mutate(Zuhause, variant = "Zuhause"),
mutate(zu_Hause, variant = "zu Hause"))
zh[which(zh$Hit=="zu"),]$Hit <- "zu Hause"
zh[which(zh$Hit=="zu Hause"),]$ContextAfter <- gsub("^Hause ", "", zh[which(zh$Hit=="zu Hause"),]$ContextAfter)
# frequency of variant by Year/Month
zh1 <- zh %>% group_by(YM, variant) %>% summarise(
n = n()
)
# total frequency by Year/Month
zh2 <- zh %>% group_by(YM) %>% summarise(
n_all = n()
)
# combine both
zh_tbl <- left_join(zh1, zh2)
# add relative frequency
zh_tbl$rel <- zh_tbl$n / zh_tbl$n_all
# omit all before 2020
zh_tbl <- zh_tbl[grepl("2020|2021", zh_tbl$YM),]
# plot
zh_tbl %>% ggplot(aes (x = YM, y = rel, group = variant, col = variant)) +
geom_line(lwd = 1.2) + scale_y_continuous(labels = scales::percent) + theme_bw() + theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) + xlab("Month") + ylab("Relative Frequency") +
guides(col = guide_legend(title = "Variant"))
zh$first_right <- first_right(zh, "ContextAfter", n = 1)
zh$last_left   <- last_left(zh, "ContextBefore", n = 1)
# get list of types in last_left and first_right columns
zh_last_left_first_right_types <- unique(c(zh$last_left, zh$first_right))
# run treetagger over those types
zh_last_left_first_right_types_tagged <- treetag(zh_last_left_first_right_types,
treetagger = "manual",
TT.options = list(path = "/Users/stefanhartmann/Downloads/TreeTagger/",
preset = "de"), lang = "de", format = "obj")
# transform to dataframe
zh_last_left_first_right_types_tagged <- tibble(
token = as.character(zh_last_left_first_right_types_tagged@tokens$token),
pos   = as.character(zh_last_left_first_right_types_tagged@tokens$wclass)
)
# remove duplicates
if(any(duplicated(zh_last_left_first_right_types_tagged$token))) {
zh_last_left_first_right_types_tagged <- zh_last_left_first_right_types_tagged[-(which(duplicated(zh_last_left_first_right_types_tagged$token))),]
}
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("LastLeftPOS" = "pos"))
# add to existing dataframe: left
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("last_left" = "token"), all.x = T)
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("FirstRightPOS" = "LastLeftPOS"))
# add to existing dataframe: right
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("first_right" = "token"), all.x = T)
# new column: "cxn" for "construction"
zh$cxn <- character(nrow(zh))
# von zu Hause
zh[which(zh$last_left=="von"),]$cxn <- "von zh"
# zu Hause zu V-en
zh[which(zh$first_right=="zu" & zh$cxn == ""),]$cxn <- "zh zu v"
# zu Hause sein
zh[which(zh$first_right %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart") | zh$last_left %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart")),]$cxn <- "zh sein"
# zh einsperren / eingesperrt
zh[grep("ein(ge)?sperr.*", zh$last_left),]$cxn <- "zh EINSPERR"
zh[grep("ein(ge)?sperr.*", zh$first_right),]$cxn <- "zh EINSPERR"
# zh verbringen
zh[grep("verbring|verbrach", zh$first_right),]$cxn <- "zh verbringen"
zh[grep("verbring|verbrach", zh$last_left),]$cxn <- "zh verbringen"
# das (eigene) Zuhause
zh[which(zh$last_left %in% c("das", "dem", "ein", "einem")),]$cxn <- "ART zh"
zh[which(last_left(zh, "ContextBefore", n = 2) %in% c("das eigene", "dem eigenen", "ein eigenes", "einem eigenen")),]$cxn <- "ART eigene zh"
# PRONOUN (demonstrative/possessive & quantifiers) + Zuhause
zh[which(zh$last_left %in% c("Ihr", "ihr", "sein", "dein", "mein", "unser", "euer", "seinem", "unserem", "keinem", "dieses", "dessen", "Ihrem", "ihrem", "kein", "keinem", "manches", "mehrere", "meinem")),]$cxn <- "PRONOUN zh"
# zh in Quarantäne
zh[which(first_right(zh, "ContextAfter", n = 2) == "in Quarantäne"),]$cxn <- "zh in Quarantäne"
# für zh
zh[which(zh$last_left == "für"),]$cxn <- "für zh"
# zh arbeiten
zh[grep("arbeit.*", zh$last_left),]$cxn <- "zh arbeiten"
zh[grep("arbeit.*", zh$first_right),]$cxn <- "zh arbeiten"
# zh bleiben
zh[grep("[Bb]leib.*", last_left(zh, "ContextBefore", n = 5)),]$cxn = "zh bleiben"
zh[grep("[Bb]leib.*", first_right(zh, "ContextAfter", n = 5)),]$cxn = "zh bleiben"
set.seed(1985)
spl <- sample(1:nrow(zh), 2000)
zh$spl <- character(nrow(zh))
zh[spl,]$spl <- "in_sample"
zh %>% write.xlsx("zh_spl.xlsx", overwrite = T)
zh_tbl
zh
zh$Year
zh$Hit
table(zh$Hit)
table(zh$Hit) %>% as_tibble()
table(zh$Hit) %>% as.data.frame()
table(zh$Hit) %>% as.data.frame() %>% setnames(Variant = Var1)
table(zh$Hit) %>% as.data.frame() %>% setnames(list(Variant = Var1))
table(zh$Hit) %>% as.data.frame() %>% rename(list(Variant = Var1))
table(zh$Hit) %>% as.data.frame()
table(zh$Hit) %>% as.data.frame() %>% str
table(zh$Hit) %>% as.data.frame() %>% rename("Variant" = "Var1")
table(zh$Hit) %>% as.data.frame() %>% rename("Variant" = "Var1") %>% kbl()
library(kableExtra)
table(zh$Hit) %>% as.data.frame() %>% rename("Variant" = "Var1") %>% kbl()
install.packages("party")
library(tidyverse)
library("koRpus.lang.de")
library(scales)
library(concordances)
library(pbapply)
library(readxl)
library(openxlsx)
library(kableExtra)
library(party)
# read data
zuhause <- read_csv("zuhause_lowercase.csv", col_types = c("d", rep("c", 7)))
Zuhause <- read_csv("Zuhause.csv")
zu_Hause <- read_csv("zu_Hause.csv", col_types = c("d", rep("c", 7)))
# add Month and Year columns
zuhause$Month <- gsub("^[0-9]{4}-|-[0-9]{2}$", "", zuhause$Date)
zuhause$Year <- gsub("-.*", "", zuhause$Date)
zuhause$YM   <- paste0(zuhause$Year, "-", zuhause$Month)
zu_Hause$Year <- gsub(".*\\.", "", zu_Hause$Date)
zu_Hause$Month <- gsub("^[0-9]{2}\\.|\\.[0-9]{4}$", "", zu_Hause$Date)
zu_Hause$YM  <- paste0(zu_Hause$Year, "-", zu_Hause$Month)
Zuhause$Month <- gsub("^[0-9]{4}-|-[0-9]{2}$", "", Zuhause$Date)
Zuhause$Year <- gsub("-.*", "", Zuhause$Date)
Zuhause$YM   <- paste0(Zuhause$Year, "-", Zuhause$Month)
# date as character (otherwise it won't bind)
zuhause$Date <- as.character(zuhause$Date)
# combine
zh <- rbind(mutate(zuhause, variant = "zuhause"),
mutate(Zuhause, variant = "Zuhause"),
mutate(zu_Hause, variant = "zu Hause"))
zh[which(zh$Hit=="zu"),]$Hit <- "zu Hause"
zh[which(zh$Hit=="zu Hause"),]$ContextAfter <- gsub("^Hause ", "", zh[which(zh$Hit=="zu Hause"),]$ContextAfter)
# frequency of variant by Year/Month
zh1 <- zh %>% group_by(YM, variant) %>% summarise(
n = n()
)
# total frequency by Year/Month
zh2 <- zh %>% group_by(YM) %>% summarise(
n_all = n()
)
# combine both
zh_tbl <- left_join(zh1, zh2)
# add relative frequency
zh_tbl$rel <- zh_tbl$n / zh_tbl$n_all
# omit all before 2020
zh_tbl <- zh_tbl[grepl("2020|2021", zh_tbl$YM),]
# plot
zh_tbl %>% ggplot(aes (x = YM, y = rel, group = variant, col = variant)) +
geom_line(lwd = 1.2) + scale_y_continuous(labels = scales::percent) + theme_bw() + theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) + xlab("Month") + ylab("Relative Frequency") +
guides(col = guide_legend(title = "Variant"))
table(zh$Hit) %>% as.data.frame() %>% rename("Variant" = "Var1") %>% kbl()
zh$first_right <- first_right(zh, "ContextAfter", n = 1)
zh$last_left   <- last_left(zh, "ContextBefore", n = 1)
# get list of types in last_left and first_right columns
zh_last_left_first_right_types <- unique(c(zh$last_left, zh$first_right))
# run treetagger over those types
zh_last_left_first_right_types_tagged <- treetag(zh_last_left_first_right_types,
treetagger = "manual",
TT.options = list(path = "/Users/stefanhartmann/Downloads/TreeTagger/",
preset = "de"), lang = "de", format = "obj")
# transform to dataframe
zh_last_left_first_right_types_tagged <- tibble(
token = as.character(zh_last_left_first_right_types_tagged@tokens$token),
pos   = as.character(zh_last_left_first_right_types_tagged@tokens$wclass)
)
# remove duplicates
if(any(duplicated(zh_last_left_first_right_types_tagged$token))) {
zh_last_left_first_right_types_tagged <- zh_last_left_first_right_types_tagged[-(which(duplicated(zh_last_left_first_right_types_tagged$token))),]
}
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("LastLeftPOS" = "pos"))
# add to existing dataframe: left
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("last_left" = "token"), all.x = T)
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("FirstRightPOS" = "LastLeftPOS"))
# add to existing dataframe: right
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("first_right" = "token"), all.x = T)
# new column: "cxn" for "construction"
zh$cxn <- character(nrow(zh))
# von zu Hause
zh[which(zh$last_left=="von"),]$cxn <- "von zh"
# zu Hause zu V-en
zh[which(zh$first_right=="zu" & zh$cxn == ""),]$cxn <- "zh zu v"
# zu Hause sein
zh[which(zh$first_right %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart") | zh$last_left %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart")),]$cxn <- "zh sein"
# zh einsperren / eingesperrt
zh[grep("ein(ge)?sperr.*", zh$last_left),]$cxn <- "zh EINSPERR"
zh[grep("ein(ge)?sperr.*", zh$first_right),]$cxn <- "zh EINSPERR"
# zh verbringen
zh[grep("verbring|verbrach", zh$first_right),]$cxn <- "zh verbringen"
zh[grep("verbring|verbrach", zh$last_left),]$cxn <- "zh verbringen"
# das (eigene) Zuhause
zh[which(zh$last_left %in% c("das", "dem", "ein", "einem")),]$cxn <- "ART zh"
zh[which(last_left(zh, "ContextBefore", n = 2) %in% c("das eigene", "dem eigenen", "ein eigenes", "einem eigenen")),]$cxn <- "ART eigene zh"
# PRONOUN (demonstrative/possessive & quantifiers) + Zuhause
zh[which(zh$last_left %in% c("Ihr", "ihr", "sein", "dein", "mein", "unser", "euer", "seinem", "unserem", "keinem", "dieses", "dessen", "Ihrem", "ihrem", "kein", "keinem", "manches", "mehrere", "meinem")),]$cxn <- "PRONOUN zh"
# zh in Quarantäne
zh[which(first_right(zh, "ContextAfter", n = 2) == "in Quarantäne"),]$cxn <- "zh in Quarantäne"
# für zh
zh[which(zh$last_left == "für"),]$cxn <- "für zh"
# zh arbeiten
zh[grep("arbeit.*", zh$last_left),]$cxn <- "zh arbeiten"
zh[grep("arbeit.*", zh$first_right),]$cxn <- "zh arbeiten"
# zh bleiben
zh[grep("[Bb]leib.*", last_left(zh, "ContextBefore", n = 5)),]$cxn = "zh bleiben"
zh[grep("[Bb]leib.*", first_right(zh, "ContextAfter", n = 5)),]$cxn = "zh bleiben"
set.seed(1985)
spl <- sample(1:nrow(zh), 2000)
zh$spl <- character(nrow(zh))
zh[spl,]$spl <- "in_sample"
zh_anno <- read_xlsx("zh_spl_anno.xlsx")
filter(zh_anno, in_sample == "y")
filter(zh_anno, spl == "in_sample")
zh_anno <- filter(zh_anno, spl == "in_sample")
filter(zh_anno, keep != "n")
zh_anno <- filter(zh_anno, keep != "n")
zh_anno
zh_anno$Hit
zh_anno$Hit <- factor(zh_anno$Hit)
# get ctree
ct <- ctree(Hit ~ cxn, data = zh_anno)
zh_anno$cxn <- factor(zh_anno$cxn)
# get ctree
ct <- ctree(Hit ~ cxn, data = zh_anno)
plot(ct)
zh_anno <- read_xlsx("zh_spl_anno.xlsx")
zh_anno <- filter(zh_anno, spl == "in_sample")
zh_anno <- filter(zh_anno, keep != "n")
# convert response variable to factor
zh_anno$Hit <- factor(zh_anno$Hit)
zh_anno$cxn <- factor(zh_anno$cxn)
# get ctree
ct <- ctree(Hit ~ cxn, data = zh_anno)
plot(ct)
cf <- cforest(Hit ~ cxn, data = zh_anno)
library(lattice)
warnings()
cf <- cforest(Hit ~ cxn, data = zh_anno, mtry = inputs)
?cforest
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry ) inputs)
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry ) 10)
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry ) 1)
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry = inputs))
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry = input))
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry = 2))
warnings()
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry = 1))
sqrt(2)
dotplot(cf)
cf
# get conditional variable importance of forest
vi <- varimp(cf, conditional = TRUE)
# get conditional variable importance of forest
vi <- varimp(cf, conditional = TRUE)
# get conditional variable importance of forest
vi <- varimp(cf)
# get conditional variable importance of forest
vi <- varimp(cf, conditional = T)
# get conditional variable importance of forest
vi <- varimp(cf)
vi
library(mlogit)
install.packages("mlogit")
library(mlogit)
mlogit.data(zh_anno, shape = "wide", choice = "Hit")
mlogit.data(zh_anno, shape = "wide", choice = "cxn")
mlogit.data(zh_anno, shape = "wide", choice = "hit")
mlogit.data(zh_anno, shape = "wide", choice = "Hit")
?mlogit
plot(ct)
library(tidyverse)
library("koRpus.lang.de")
library(scales)
library(concordances)
library(pbapply)
library(readxl)
library(openxlsx)
library(kableExtra)
library(party)
library(lattice)
library(mlogit)
library(wizard)
# read data
zuhause <- read_csv("zuhause_lowercase.csv", col_types = c("d", rep("c", 7)))
Zuhause <- read_csv("Zuhause.csv")
zu_Hause <- read_csv("zu_Hause.csv", col_types = c("d", rep("c", 7)))
# add Month and Year columns
zuhause$Month <- gsub("^[0-9]{4}-|-[0-9]{2}$", "", zuhause$Date)
zuhause$Year <- gsub("-.*", "", zuhause$Date)
zuhause$YM   <- paste0(zuhause$Year, "-", zuhause$Month)
zu_Hause$Year <- gsub(".*\\.", "", zu_Hause$Date)
zu_Hause$Month <- gsub("^[0-9]{2}\\.|\\.[0-9]{4}$", "", zu_Hause$Date)
zu_Hause$YM  <- paste0(zu_Hause$Year, "-", zu_Hause$Month)
Zuhause$Month <- gsub("^[0-9]{4}-|-[0-9]{2}$", "", Zuhause$Date)
Zuhause$Year <- gsub("-.*", "", Zuhause$Date)
Zuhause$YM   <- paste0(Zuhause$Year, "-", Zuhause$Month)
# date as character (otherwise it won't bind)
zuhause$Date <- as.character(zuhause$Date)
# combine
zh <- rbind(mutate(zuhause, variant = "zuhause"),
mutate(Zuhause, variant = "Zuhause"),
mutate(zu_Hause, variant = "zu Hause"))
zh[which(zh$Hit=="zu"),]$Hit <- "zu Hause"
zh[which(zh$Hit=="zu Hause"),]$ContextAfter <- gsub("^Hause ", "", zh[which(zh$Hit=="zu Hause"),]$ContextAfter)
# frequency of variant by Year/Month
zh1 <- zh %>% group_by(YM, variant) %>% summarise(
n = n()
)
# total frequency by Year/Month
zh2 <- zh %>% group_by(YM) %>% summarise(
n_all = n()
)
# combine both
zh_tbl <- left_join(zh1, zh2)
# add relative frequency
zh_tbl$rel <- zh_tbl$n / zh_tbl$n_all
# omit all before 2020
zh_tbl <- zh_tbl[grepl("2020|2021", zh_tbl$YM),]
# plot
zh_tbl %>% ggplot(aes (x = YM, y = rel, group = variant, col = variant)) +
geom_line(lwd = 1.2) + scale_y_continuous(labels = scales::percent) + theme_bw() + theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) + xlab("Month") + ylab("Relative Frequency") +
guides(col = guide_legend(title = "Variant"))
table(zh$Hit) %>% as.data.frame() %>% rename("Variant" = "Var1") %>% kbl()
zh$first_right <- first_right(zh, "ContextAfter", n = 1)
zh$last_left   <- last_left(zh, "ContextBefore", n = 1)
# get list of types in last_left and first_right columns
zh_last_left_first_right_types <- unique(c(zh$last_left, zh$first_right))
# run treetagger over those types
zh_last_left_first_right_types_tagged <- treetag(zh_last_left_first_right_types,
treetagger = "manual",
TT.options = list(path = "/Users/stefanhartmann/Downloads/TreeTagger/",
preset = "de"), lang = "de", format = "obj")
# transform to dataframe
zh_last_left_first_right_types_tagged <- tibble(
token = as.character(zh_last_left_first_right_types_tagged@tokens$token),
pos   = as.character(zh_last_left_first_right_types_tagged@tokens$wclass)
)
# remove duplicates
if(any(duplicated(zh_last_left_first_right_types_tagged$token))) {
zh_last_left_first_right_types_tagged <- zh_last_left_first_right_types_tagged[-(which(duplicated(zh_last_left_first_right_types_tagged$token))),]
}
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("LastLeftPOS" = "pos"))
# add to existing dataframe: left
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("last_left" = "token"), all.x = T)
# rename column
zh_last_left_first_right_types_tagged <- rename(zh_last_left_first_right_types_tagged, c("FirstRightPOS" = "LastLeftPOS"))
# add to existing dataframe: right
zh <- left_join(zh, zh_last_left_first_right_types_tagged, by = c("first_right" = "token"), all.x = T)
# new column: "cxn" for "construction"
zh$cxn <- character(nrow(zh))
# von zu Hause
zh[which(zh$last_left=="von"),]$cxn <- "von zh"
# zu Hause zu V-en
zh[which(zh$first_right=="zu" & zh$cxn == ""),]$cxn <- "zh zu v"
# zu Hause sein
zh[which(zh$first_right %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart") | zh$last_left %in% c("sein", "bin", "bist", "ist", "seid", "sind", "war", "warst", "waren", "wart")),]$cxn <- "zh sein"
# zh einsperren / eingesperrt
zh[grep("ein(ge)?sperr.*", zh$last_left),]$cxn <- "zh EINSPERR"
zh[grep("ein(ge)?sperr.*", zh$first_right),]$cxn <- "zh EINSPERR"
# zh verbringen
zh[grep("verbring|verbrach", zh$first_right),]$cxn <- "zh verbringen"
zh[grep("verbring|verbrach", zh$last_left),]$cxn <- "zh verbringen"
# das (eigene) Zuhause
zh[which(zh$last_left %in% c("das", "dem", "ein", "einem")),]$cxn <- "ART zh"
zh[which(last_left(zh, "ContextBefore", n = 2) %in% c("das eigene", "dem eigenen", "ein eigenes", "einem eigenen")),]$cxn <- "ART eigene zh"
# PRONOUN (demonstrative/possessive & quantifiers) + Zuhause
zh[which(zh$last_left %in% c("Ihr", "ihr", "sein", "dein", "mein", "unser", "euer", "seinem", "unserem", "keinem", "dieses", "dessen", "Ihrem", "ihrem", "kein", "keinem", "manches", "mehrere", "meinem")),]$cxn <- "PRONOUN zh"
# zh in Quarantäne
zh[which(first_right(zh, "ContextAfter", n = 2) == "in Quarantäne"),]$cxn <- "zh in Quarantäne"
# für zh
zh[which(zh$last_left == "für"),]$cxn <- "für zh"
# zh arbeiten
zh[grep("arbeit.*", zh$last_left),]$cxn <- "zh arbeiten"
zh[grep("arbeit.*", zh$first_right),]$cxn <- "zh arbeiten"
# zh bleiben
zh[grep("[Bb]leib.*", last_left(zh, "ContextBefore", n = 5)),]$cxn = "zh bleiben"
zh[grep("[Bb]leib.*", first_right(zh, "ContextAfter", n = 5)),]$cxn = "zh bleiben"
set.seed(1985)
spl <- sample(1:nrow(zh), 2000)
zh$spl <- character(nrow(zh))
zh[spl,]$spl <- "in_sample"
zh_anno <- read_xlsx("zh_spl_anno.xlsx")
zh_anno <- filter(zh_anno, spl == "in_sample")
zh_anno <- filter(zh_anno, keep != "n")
# convert response variable to factor
zh_anno$Hit <- factor(zh_anno$Hit)
zh_anno$cxn <- factor(zh_anno$cxn)
# get ctree
ct <- ctree(Hit ~ cxn, data = zh_anno)
cf <- cforest(Hit ~ cxn, data = zh_anno, controls = cforest_unbiased(mtry = 1))
# plot conditional inference tree
plot(ct)
